{"version":3,"sources":["components/WeatherForm/WeatherForm.tsx","components/WeatherResult/WeatherResult.tsx","components/Application/App.tsx","reportWebVitals.js","index.js"],"names":["WeatherForm","onChange","value","className","placeholder","type","WeatherResult","error","weatherData","city","date","sunrise","sunset","temp","wind","pressure","content","timeSunrise","Date","toLocaleTimeString","timeSunset","initialData","App","useState","inputValue","setInputValue","setWeatherData","setError","lastInputValue","setLastInputValue","useEffect","length","API","fetch","then","response","ok","Error","json","data","toLocaleString","sys","main","speed","catch","fetchWeather","event","currentTarget","handleInputChange","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cba7a7f2.chunk.js","sourcesContent":["import { FC } from \"react\";\nimport './WeatherForm.css'\n\ninterface FormProps {\n    onChange: (e: React.FormEvent<HTMLInputElement>) => void;\n    value: string | number | readonly string[];\n}\n\nexport const WeatherForm: FC<FormProps> = ({onChange, value}: FormProps) => (\n    <>\n    <h1 className=\"form-title\">Aktualna pogoda</h1>\n    <form className=\"form\">\n        <input \n        className='form-input'\n        onChange={onChange}\n        placeholder=\"Wpisz miasto...\"\n        type=\"text\" \n        value={value}\n        />\n    </form>\n    </>\n)\n","import { FC } from \"react\";\nimport './WeatherResult.css';\n\ninterface WeatherProps {\n    date: string;\n    city: string,\n    sunrise: number,\n    sunset: number,\n    temp: string,\n    wind: string,\n    pressure: string,\n}\n\ninterface Props {\n    weatherData: WeatherProps;\n    error: boolean\n}\n\nexport const WeatherResult: FC<Props> = ({ error, weatherData}: Props) => {\n    const {city, date, sunrise, sunset, temp, wind, pressure} = weatherData;\n\n    let content = null;\n\n    if(!error && city){\n        const timeSunrise = new Date(sunrise * 1000).toLocaleTimeString();\n        const timeSunset = new Date(sunset * 1000).toLocaleTimeString();\n        content = (\n            <>\n                <h2 className=\"result-city\">{city}</h2>\n                <p>Data i godzina: <strong>{date}</strong></p>\n                <p>Temperatura: <strong>{temp} &#176;C</strong> </p>\n                <p>Ciśnienie: <strong>{pressure} hPa</strong></p>\n                <p>Prędkość wiatru: <strong>{wind} m/s</strong></p>\n                <p>Wschód słońca: <strong>{timeSunrise}</strong></p>\n                <p>Zachód słońca: <strong>{timeSunset}</strong></p> \n            </> \n        )\n    }\n\n    return(\n        <div className='result'>\n            {error ? `Brak miasta ${city} w bazie!` : content}\n        </div>    \n    )\n}\n","import { FC, FormEvent, useEffect, useState } from 'react';\nimport './App.css';\nimport { WeatherForm } from '../WeatherForm/WeatherForm';\nimport { WeatherResult } from '../WeatherResult/WeatherResult';\n\nconst KEYApi = 'ef39c9d59e30776fa6c28a91fd47f445';\n\nconst initialData = {\n  date: '',\n  city: '',\n  sunrise: 0,\n  sunset: 0,\n  temp: '',\n  wind: '',\n  pressure: ''\n}\n\nconst App: FC = () => {\n  const [ inputValue, setInputValue ] = useState('');\n  const [ weatherData, setWeatherData ] = useState(initialData);\n  const [ error, setError ] = useState(false);\n  const [ lastInputValue, setLastInputValue ] = useState('')\n\n  const fetchWeather = (value: string) => {\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${inputValue}&APPID=${KEYApi}&units=metric`;\n    \n    fetch(API)\n    .then(response => {\n      if(response.ok){\n        return response;\n      }\n      throw Error('Błąd...')\n    })\n    .then(response => response.json())\n    .then(data => {\n      const date = new Date().toLocaleString();\n      setLastInputValue(value)\n      setWeatherData( {\n        date,\n        city: inputValue,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset,\n        temp: data.main.temp,\n        wind: data.wind.speed,\n        pressure: data.main.pressure,\n      });\n      setError(false);\n    })\n    .catch(error => {\n      setWeatherData((initialData));\n      setError(true)\n    })\n  }\n\n  const handleInputChange = (event: FormEvent<HTMLInputElement>) => {\n    setInputValue(\n      event.currentTarget.value\n    )\n  }\n\n  useEffect(() => {\n    if(inputValue.length === 1 ) return;\n    lastInputValue !== inputValue && fetchWeather(lastInputValue);\n  }, [inputValue]);\n\n    return(\n      <div className=\"app\">\n        <div className='app-container'>\n        <WeatherForm \n        value={inputValue} \n        onChange={(event) => handleInputChange(event)}\n        />\n        <WeatherResult \n        weatherData={{...weatherData}}\n        error={error}\n        />  \n       </div>\n      </div>\n    )\n  }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/Application/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}